#include <stdlib.h> // malloc
#include <string.h> // strcmp
#include "cheats.h"

struct List {
    first: struct ListNode *,
    last: struct ListNode *,
}

struct ListNode {
    data: void *,
    next: struct ListNode *,
}

fn list_init() -> struct List
{
    let list: struct List;
    list.first = NULL;
    list.last = NULL;
    return list;
}

fn list_push(list: struct List *, data: void *)
{
    let new_node: struct ListNode * = malloc(sizeof(*new_node));
    new_node->data = data;
    new_node->next = NULL;

    if (list->first && list->last)
    {
        list->last->next = new_node;
        list->last = new_node;
    }
    else
    {
        list->first = new_node;
        list->last = new_node;
    }
}

fn list_is_empty(list: struct List *) -> bool
{
    return list->first == NULL;
}

fn list_pop_front(list: struct List *) -> void *
{
    if (list_is_empty(list))
        return NULL;

    let data: void * = list->first->data;
    list->first = list->first->next;
    if (list->first == NULL)
        list->last = NULL;
    // TODO: free the ListNode we just popped
    return data;
}

fn list_contains_cstr(haystack: struct List *, needle: char *) -> bool
{
    let node: struct ListNode * = haystack->first;
    while (node)
    {
        let element: char * = (char *)node->data;

        if (strcmp(element, needle) == 0)
            return true;

        node = node->next;
    }
    return false;
}

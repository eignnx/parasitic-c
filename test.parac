#include <stdio.h>
#include <stdlib.h> // exit, perror
#include "lex.parac"
#include "parse.parac"
#include "cstr_buf.parac"
#include "cheats.h" // format_alloc, path_separator

fn test()
{
    test_lexer();
    test_parser();
    test_examples();
    printf("\n\n\n%s\n", "Tests finished!");
}

fn test_lex(input: char *)
{
    printf("--------\n");
    lex_all_input(input);
}

fn test_lexer()
{
    printf("LEXER TESTS---------------------\n");
    test_lex("  -123  ");
    test_lex("  \"qwerty pgfdjba\"  ");
    test_lex("  true  ");
    test_lex("  false");
    test_lex("  #include <stdio.h>  ");
    test_lex("  #include \"stdio.h\"  ");
    test_lex("  default // comment\n // blah\n default\n\n default  ");
}

fn test_expr(input: char *)
{
    let lxr: struct Lexer;
    let expr: struct Expr *;

    printf("\n");
    lxr = lexer_init("<expr parse test>", input);
    if ((expr = parse_expression(&lxr)) && lexer_accept(&lxr, TOK_END_OF_INPUT))
        display_expr(stdout, expr);
    else
        fprintf_s(stderr, "\n!!! Test failure on input:\n  \"%s\"\n", input);
}

fn test_parse_exprs()
{
    printf("\n\n----------------------TEST EXPRS-----------------------------");
    test_expr("  -531  ");
    test_expr("  '\\n'   ");
    test_expr("  \"adfkjlhksjdfh \\n kajdfjahdfs adf a.\"   ");
    test_expr("  true ");
    test_expr("  false ");
    test_expr("  my_dog->birth_date[100].year++ ");
    test_expr("  my_func(1, 2, 3) ");
    test_expr("  my_func(1, 2, 3, ) ");
    test_expr("  my_func() ");
    test_expr("  !*&*ptr_to_bool  ");
    test_expr("  sizeof(*expr)  ");
    test_expr("  sizeof(void)  ");
    test_expr("  (int) true ");
    test_expr("  1 + 2 - 3 + 4 ");
    test_expr("  100 > 0 ");
    test_expr("  100 >= 0 ");
    test_expr("  100 < 0 ");
    test_expr("  100 < 0 || 100 > 0"); // Should parse expression, not ANGLE_BRACKET_FILENAME
    test_expr("  100 <= 0 ");
    test_expr("  100 != 0 ");
    test_expr("  100 != 0 && -4 < -3  ");
    test_expr("  100 != 0 || -4 < -3  ");
    test_expr("  **ptr_ptr = *ptr = 123  ");
}

fn test_type(input: char *)
{
    let lxr: struct Lexer;
    let type: struct Type *;

    printf("\n");
    lxr = lexer_init("<type parse test>", input);
    if ((type = parse_type(&lxr)) && lexer_accept(&lxr, TOK_END_OF_INPUT))
        display_type(stdout, type);
    else
        fprintf_s(stderr, "\n!!! Test failure on input:\n  \"%s\"\n", input);
}

fn test_typed_ident(input: char *)
{
    let lxr: struct Lexer;
    let type: struct Type *;

    printf("\n");
    lxr = lexer_init("<typed ident parse test>", input);
    if ((type = parse_type(&lxr)) && lexer_accept(&lxr, TOK_END_OF_INPUT))
        display_typed_identifier(stdout, type, "foo");
    else
        fprintf_s(stderr, "\n!!! Test failure on input:\n  \"%s\"\n", input);
}

fn test_parse_types()
{
    printf("\n\n----------------------TEST TYPES-----------------------------");
    test_type("  int  ");
    test_type("  bool  ");
    test_type("  char  ");
    test_type("  void  ");
    test_type("  cstr_arr  ");
    test_type("  FILE*  ");
    test_type("  char**  ");
    test_type("  struct Expr  ");
    test_type("  enum Tag  ");
    test_type("  struct { x: int, y: int, }  ");
    test_type("  union { x: int, y: void *, }  ");
    test_type("  enum { TOK_PLUS, TOK_MINUS, TOK_INT }  ");
    test_type("  enum { SOMETHING, TRAILING_COMMA, }  ");
    test_type("  enum { }  ");
    test_type("  fn()  ");
    test_type("  fn(int, bool)  ");
    test_type("  fn(int, bool,)  ");
    test_type("  fn(int, bool,) -> struct Expr* ");

    test_typed_ident("  fn()  ");
    test_typed_ident("  fn(int, bool)  ");
    test_typed_ident("  fn(int, bool,) -> struct Expr* ");
    test_typed_ident("  fn(int) -> fn(bool) -> fn(FILE) -> char  ");
}

fn test_stmt(input: char *)
{
    let lxr: struct Lexer;
    let stmt: struct Stmt *;

    printf("\n");
    lxr = lexer_init("<stmt parse test>", input);
    if ((stmt = parse_stmt(&lxr)) && lexer_accept(&lxr, TOK_END_OF_INPUT))
        display_stmt(stdout, stmt);
    else
        fprintf_s(stderr, "\n!!! Test failure on input:\n  \"%s\"\n", input);
}

fn test_parse_stmts()
{
    printf("\n\n----------------------TEST STMTS-----------------------------");
    test_stmt("  {}  ");
    test_stmt("  { let x: int = 1; launch_missiles(x, 2, 3); }  ");
    test_stmt("  if (123 < 456) { return; }  ");
    test_stmt("  if (need_else_here) { return 100; } else { return -1; }  ");
    test_stmt("  while (i < len) { iterate(); }  ");
    test_stmt("  switch (123) {}  ");
    test_stmt("  switch (x) { case 1: return 1; case 2: f(); break; default: return 0;}  ");
    test_stmt("  break;  ");
    test_stmt("  continue;  ");
    test_stmt("  return 123;  ");
    test_stmt("  return;  ");
    test_stmt("  let x: int;  ");
    test_stmt("  let f: FILE *;  ");
    test_stmt("  let x: int = 123;  ");
    test_stmt("  launch_missiles(1, 2, 3);  ");
}

fn test_item(input: char *)
{
    let lxr: struct Lexer;
    let item: struct Item *;

    printf("\n");
    lxr = lexer_init("<item parse test>", input);
    if ((item = parse_item(&lxr)) && lexer_accept(&lxr, TOK_END_OF_INPUT))
        display_item(stdout, item);
    else
        fprintf_s(stderr, "\n!!! Test failure on input:\n  \"%s\"\n", input);
}

fn test_parse_items()
{
    printf("\n\n----------------------TEST ITEMS-----------------------------");
    test_item("  fn foo(x: int, y: int) -> int { return x + y; }  ");
    test_item("  fn bar() -> void {}  ");
    test_item("  fn three_things() { a(); b(); c(); }  ");
    test_item("  global my_const: int = 100;  ");
    test_item("  global names: cstr_arr = { \"Jenn\", \"Tim\", \"Scott\", };  ");
    test_item("  struct EmptyStruct {}  ");
    test_item("  struct Point { x: int, y: int, }  ");
    test_item("  enum EmptyEnum {}  ");
    test_item("  enum TokTag { TOK_IDENT, TOK_PLUS }  ");
    test_item("  #include <stdio.h>  ");
    test_item("  #include \"my_file.h\"  ");
}

fn test_translation_unit(input: char *)
{
    let lxr: struct Lexer;
    let translation_unit: struct TranslationUnit;

    printf("\n");
    lxr = lexer_init("<translation unit parse test>", input);
    translation_unit = parse_translation_unit(&lxr);
    display_translation_unit(stdout, &translation_unit);
}

fn test_parse_translation_unit()
{
    printf("\n\n----------------------TEST TRANSLATION UNITS-----------------");
    test_translation_unit("#include <stdio.h>\n fn main() -> int\n{\nreturn 0;\n}");
    // test_translation_unit("#include <stdio.h>\n fn(int main())\n{\nBLARGLE 0;\n}");
}

fn test_parser()
{
    printf("%s\n", "Running parser tests...");
    test_parse_exprs();
    test_parse_types();
    test_parse_stmts();
    test_parse_items();
    test_parse_translation_unit();
    printf("\n\n%s\n", "Parser tests finished!");
}

fn read_lex_and_parse(path: char*)
{
    let f: FILE *;
    if (fopen_s(&f, path, "r") != 0)
    {
        perror("Failed to open file");
        fprintf_s(stderr, ">>> '%s'\n", path);
        exit(1);
    }

    let buf: struct CStrBuf = init_cstr_buf();
    read_to_cstr_buf(f, &buf);
    fclose(f);

    let lxr: struct Lexer = lexer_init(path, buf.buf);
    parse_translation_unit(&lxr);
}

global EXAMPLES: cstr_arr = {
    "hello_world.parac",
    "higher_order_fns.parac",
    "forward_decls.parac",
    "object.parac",
    NULL,
};

fn test_examples()
{
    let ex: char** = &EXAMPLES[0];

    while (*ex != NULL)
    {
        let filename: char* = *ex;
        let sep: char = path_separator();
        let path: char* = format_alloc(".%ctests%c%s", sep, sep, filename);
        read_lex_and_parse(path);
        printf("\nFile `%s` parses successfully.", path);
        free(path);
        ex++;
    }
}

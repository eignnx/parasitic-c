// TODO: figure out a way to set compiler flags like this.
// #define __STDC_WANT_LIB_EXT1__ 1 // Include `*_s` functions.
#include <stdio.h>        // fprintf_s, stderr, fopen_s
#include <stdlib.h>       // exit, perror
#include <string.h>       // strrchr, strchr
#include "parse.parac"    // *
#include "lex.parac"      // struct Lexer, ...
#include "test.parac"     // test
#include "cstr_buf.parac" // struct CStrBuf, init_cstr_buf,
                          // read_to_cstr_buf
#include "list.parac"     // *
#include "cheats.h"       // format_alloc

global COMP_LOG: bool = true;

fn usage()
{
    fprintf_s(stderr, "paracc - A compiler for Parasitic C\n");
    fprintf_s(stderr, "\n");
    fprintf_s(stderr, "  USAGE:\n");
    fprintf_s(stderr, "\n");
    fprintf_s(stderr, "    paracc FILE\n");
    fprintf_s(stderr, "\n");
    fprintf_s(stderr, "    WHERE:\n");
    fprintf_s(stderr, "\n");
    fprintf_s(stderr, "      FILE - The source file that contains the entry\n");
    fprintf_s(stderr, "             point to the program.\n");

    exit(1);
}

fn comp_log(msg: char *)
{
    if (!COMP_LOG)
        return;

    if (fprintf_s(stderr, "%s", msg) < 0)
    {
        perror("Failure to comp_log message");
        exit(1);
    }
}

// "parse.parac.c" --> "parse.c"
// "parse.parac.h" --> "parse.h"
// "parse.parac" --> "parse.h"
fn remove_parac_extension(filename: char *) -> char *
{
    let last_slash: char * = strrchr(filename, path_separator());
    if (!last_slash)
        last_slash = filename;
    let extension: char * = strchr(last_slash, '.');
    if (!extension)
    {
        fprintf_s(stderr, "`%s` doesn't have a file extension\n", filename);
        exit(1);
    }

    if (!is_parac_file(extension))
    {
        fprintf_s(stderr, "ERROR:\n| `%s` is not a `.parac(.*)?` file\n", filename);
        exit(1);
    }

    let ext_len: int = strlen(".parac");
    let filename_len: int = strlen(filename); // TODO: use strnlen_s

    return format_alloc("%.*s.c", filename_len - ext_len, filename);
}

struct Compiler
{
    processed_files: struct List,        // A `List` of `char*`s.
    files_to_be_processed: struct List, // A `List` of `char*`s.
}

// From: https://stackoverflow.com/a/744822/9045161
fn endswith(str: char *, suffix: char *) -> bool
{
    if (!str || !suffix)
        return false;
    let lenstr: int = strlen(str);
    let lensuffix: int = strlen(suffix); // TODO: change these back to size_t
    if (lensuffix > lenstr)
        return false;
    return strncmp(str + lenstr - lensuffix, suffix, lensuffix) == 0;
}

fn is_parac_file(filename: char *) -> bool
{
    return endswith(filename, ".parac.c") ||
           endswith(filename, ".parac.h") ||
           endswith(filename, ".parac");
}

fn all_included_parac_filenames(tu: struct TranslationUnit *) -> struct List
{
    let node: struct ListNode * = tu->directives.first;
    let parac_filenames: struct List = list_init();

    while (node)
    {
        let item: struct Item * = (struct Item *)node->data;

        if (item->tag == ITEM_POUND_INCLUDE)
        {
            let filename: char * = item->as.pound_include.filename;
            if (is_parac_file(filename))
            {
                list_push(&parac_filenames, (void *)filename);
                let new_filename: char * = remove_parac_extension(filename);
                item->as.pound_include.filename = new_filename; // TODO: free the old string
            }
        }

        node = node->next;
    }

    return parac_filenames;
}

// Example: "/asdf/qwer/poiu.txt" --> "/asdf/qwer"
fn dirname(path: char *) -> char *
{
    let dir: char * = strdup(path);
    let last_sep: char * = strrchr(dir, path_separator());
    if (!last_sep)
    {
        // TODO: free dir?
        return "";
    }

    *last_sep = '\0';
    return dir;
}

// Example: "/asdf/qwer/poiu.txt" --> "poiu.txt"
fn basename(path: char *) -> char *
{
    let last_sep: char * = strrchr(path, path_separator());
    if (!last_sep)
        return "";
    last_sep++; // Skip the path separator.
    return last_sep;
}

fn path_join(p1: char *, p2: char *) -> char *
{
    return format_alloc("%s%c%s", p1, path_separator(), p2);
}

fn compile_file(filename: char *, dir_root: char *) -> struct List
{
    let f: FILE *;

    comp_log("[OPENING FILE '");
    comp_log(filename);
    comp_log("']\n");

    let path: char * = path_join(dir_root, filename);
    if (fopen_s(&f, path, "r") != 0)
    {
        perror("Failed to open file");
        fprintf_s(stderr, ">>> '%s'\n", path);
        exit(1);
    }

    let buf: struct CStrBuf = init_cstr_buf();

    comp_log("[READING FILE TO STRING...]\n");
    read_to_cstr_buf(f, &buf);
    fclose(f);

    comp_log("[PARSING INPUT...]\n");
    let lxr: struct Lexer = lexer_init(path, buf.buf);
    let tu: struct TranslationUnit = parse_translation_unit(&lxr);
    let included_parac_files: struct List = all_included_parac_filenames(&tu);

    let out: FILE *;

    let new_filename: char * = path_join(dir_root, remove_parac_extension(filename));
    comp_log("[OPENING OUTPUT FILE...]\n");
    if (fopen_s(&out, new_filename, "w") != 0)
    {
        perror("Failed to open file");
        fprintf_s(stderr, ">>> '%s'\n", new_filename);
        exit(1);
    }

    if (!display_translation_unit(out, &tu))
    {
        fprintf_s(stderr, "Error: Failure to output translation unit!\n");
        fclose(out);
        exit(1);
    }
    fclose(out);

    return included_parac_files;
}

fn compile_project(compiler: struct Compiler *, project_root: char *)
{
    let base_dir: char * = dirname(project_root);
    let project_root_basename: char * = basename(project_root);
    list_push(&compiler->files_to_be_processed, (void *)project_root_basename);

    while (compiler->files_to_be_processed.first != NULL)
    {
        let filename: char * = (char *)list_pop_front(&compiler->files_to_be_processed);

        let new_files: struct List = compile_file(filename, base_dir);
        list_push(&compiler->processed_files, filename);

        let node: struct ListNode * = new_files.first;
        while (node)
        {
            let new_file: char * = (char *)node->data;

            // Don't compile already compiled files.
            if (!list_contains_cstr(&compiler->processed_files, new_file))
            {
                list_push(&compiler->files_to_be_processed, (void *)new_file);
            }

            node = node->next;
        }
    }
}

fn main(argc: int, argv: char **) -> int
{
    let compiler: struct Compiler;
    compiler.files_to_be_processed = list_init();
    compiler.processed_files = list_init();

    if (argc <= 1 || argc > 2)
        usage();
    else if (strcmp(argv[1], "--test") == 0)
    {
        test();
    }
    else // argc == 2
    {
        compile_project(&compiler, argv[1]);
    }

    return 0;
}

#include <stdio.h>  // fgets
#include <stdlib.h> // malloc, realloc, exit, perror
#include <string.h> // strnlen_s
#include "cheats.h" // fn

struct CStrBuf {
    cap: int,
    nbytes: int, // The number of non-null bytes stored in `buf`.
    buf: char *,
}

global INITIAL_CSTR_BUF_CAP: int = 64;

fn init_cstr_buf() -> struct CStrBuf
{
    let s: struct CStrBuf;
    s.cap = INITIAL_CSTR_BUF_CAP;
    s.buf = (char *)malloc(s.cap);

    if (s.buf == NULL)
    {
        perror("Failed to allocate CStrBuf");
        exit(1);
    }

    // Add null byte so that `s.buf` can be printed as the empty string.
    s.buf[0] = '\0';
    s.nbytes = 1;

    return s;
}

fn cstr_buf_realloc_if_full(s: struct CStrBuf *)
{
    let space_available: int = s->cap - s->nbytes;
    if (space_available <= 0)
    {
        let new_cap: int = s->cap + s->cap;
        s->buf = (char *)realloc(s->buf, new_cap);
        if (s->buf == NULL)
        {
            perror("Could not realloc CStrBuf");
            exit(1);
        }
        s->cap = new_cap;
    }
}

fn read_to_cstr_buf(f: FILE *, s: struct CStrBuf *)
{
    while (!feof(f))
    {
        cstr_buf_realloc_if_full(s);

        // TODO: optimize this so that `strlen` doesn't need to be called.
        let write_here: char * = s->buf + strnlen_s(s->buf, s->cap);
        let space_available: int = s->cap - s->nbytes;
        let line: char * = fgets(write_here, space_available, f);
        if (line == NULL && !feof(f))
        {
            perror("Error reading to CStrBuf");
            exit(1);
        }
        if (line == NULL)
            return;

        let line_len: int = strnlen_s(line, space_available);
        s->nbytes = s->nbytes +
                    line_len +
                    sizeof((char)'\0');
    }
}
